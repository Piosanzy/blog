#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('blog:server');
var http = require('http');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '7500');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = require('http').createServer(app);
var io = require('socket.io')(server);

var roomChatting = io.of('chat/room').on('connection',function (socket) {

    socket.on('join',function (data){
        socket.room = data.room;
        socket.user_name = data.user_name;
        socket.user_id = data.user_id;
        socket.join(socket.room);

        roomChatting.to(socket.room).emit('join', socket.user_name);
    })

    socket.on('chat',function (data) {
        console.log('message from client: ', data);

        const _data = {
            user_name : socket.user_name,
            user_id: socket.user_id,
            answer: data.answer,
            room_id: socket.room,
        }

        roomChatting.to(socket.room).emit('chat', _data);
    });
})
io.on('connection', function (socket) {
    // 접속한 클라이언트의 정보가 수신되면
    socket.on('login',function (data) {
        console.log('Client logged-in:\n name:' + data.user_name + '\n userid: ' + data.user_id);

        // socket에 클라이언트 정보를 저장한다
        socket.user_name = data.user_name;
        socket.user_id = data.user_id;
        socket.roomId = data.roomId
        // socket.join(socket.roomId)
        const _data = {
            user_id: data.user_id,
            user_name: data.user_name,
        }
        // 접속된 모든 클라이언트에게 메시지를 전송한다
        io.emit('login', _data);

    });

    // 클라이언트로부터의 메시지가 수신되면
    socket.on('chat', function (data) {
        console.log('%s : Message from %s: %s', socket.roomId, socket.name, data.msg);

        var msg = {
            from: {
                name: socket.name,
                userid: socket.userid
            },
            msg: data.msg
        };

        // 메시지를 전송한 클라이언트를 제외한 모든 클라이언트에게 메시지를 전송한다
        socket.to(socket.roomId).emit('chat', msg);

        // 메시지를 전송한 클라이언트에게만 메시지를 전송한다
        // socket.emit('s2c chat', msg);

        // 접속된 모든 클라이언트에게 메시지를 전송한다
        // io.emit('s2c chat', msg);

        // 특정 클라이언트에게만 메시지를 전송한다
        // io.to(id).emit('s2c chat', data);
    });

    // force client disconnect from server
    socket.on('forceDisconnect', function () {
        console.log('user disconnected: ' + socket.user_name);
        socket.disconnect();
    })

    socket.on('disconnect', function () {
        io.emit('disconnectSession',socket.user_id);
        console.log('user disconnected: ' + socket.user_name);
    });
});

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
    var port = parseInt(val, 10);

    if (isNaN(port)) {
        // named pipe
        return val;
    }

    if (port >= 0) {
        // port number
        return port;
    }

    return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
    if (error.syscall !== 'listen') {
        throw error;
    }

    var bind = typeof port === 'string'
        ? 'Pipe ' + port
        : 'Port ' + port;

    // handle specific listen errors with friendly messages
    switch (error.code) {
        case 'EACCES':
            console.error(bind + ' requires elevated privileges');
            process.exit(1);
            break;
        case 'EADDRINUSE':
            console.error(bind + ' is already in use');
            process.exit(1);
            break;
        default:
            throw error;
    }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
    var addr = server.address();
    var bind = typeof addr === 'string'
        ? 'pipe ' + addr
        : 'port ' + addr.port;
    debug('Listening on ' + bind);
}
